#!/usr/bin/python3

import socket
from _thread import *
import pymysql


def threaded(client, addr):
    print('Connected by :', addr[0], ':', addr[1])

    while True:

        try:

            data = client.recv(15)

            if data.decode() == 'shell_code     ':

                db = pymysql.connect(host="localhost", port=3306, user="root", password="toor", database="bbomain",

                                     charset='utf8')

                cursor = db.cursor()

                sql = "SELECT * FROM vuln_shell_list"

                cursor.execute(sql)

                result = cursor.fetchall()

                for record in result:
                    print(record[0])

                    msg = record[1].encode()

                    length = len(msg)

                    client.send(length.to_bytes(4, byteorder="little"))

                    client.send(msg)

                client.sendall("shell_code_end".encode())

                db.close()

            if data.decode() == 'shell_result   ':
                print("shell result!!!")
                filename = './result.log'
                with open(filename, 'a') as f:
                    # print("file open")
                    data = client.recv(4)
                    length = int.from_bytes(data, "little")
                    data = client.recv(length)
                    print(data)
                    msg = data.decode()
                    f.write(msg)
                    f.close()

            if not data:
                print('Disconnected by ' + addr[0], ':', addr[1])

                break

            print('Received from ' + addr[0], ':', addr[1], data.decode())


        except ConnectionResetError as e:

            print('Disconnected by ' + addr[0], ':', addr[1])

            break

    client.close()


server = socket.socket()

server.bind(('172.31.45.126', 9999))

server.listen(1)

print("server open!")

while True:
    client, addr = server.accept()

    start_new_thread(threaded, (client, addr))

client.close()

server.close()
