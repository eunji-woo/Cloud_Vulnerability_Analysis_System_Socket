import socket
from _thread import *
import pymysql
import re
import datetime
import os


def threaded(client, addr):
    print('Connected by :', addr[0], ':', addr[1])

    while True:

        try:

            data = client.recv(25)

            if data.decode() == 'shell_code_to_server     ':
                client.sendall("shell_code_to_client     ".encode())
                db = pymysql.connect(host="localhost", port=3306, user="root", password="toor", database="bbomain",

                                     charset='utf8')

                cursor = db.cursor()

                ip = re.search('raddr=\((.+?)\,', str(client)).group(1)
                #print("ip: ",ip)
                #print("\n")
                run_date = "SELECT schedule_run_date from vuln_schedule_list WHERE schedule_ip = " + ip + " LIMIT 1"
                duration = "SELECT schedule_duration from vuln_schedule_list WHERE schedule_ip = " + ip + " LIMIT 1"
                repeat = "SELECT schedule_repeat from vuln_schedule_list WHERE schedule_ip = " + ip + " LIMIT 1"
                shell_num = "SELECT shell_num from vuln_schedule_list WHERE schedule_ip = " + ip + " LIMIT 1"

                cursor.execute(shell_num)
                shell_num = cursor.fetchall()

                cursor.execute(run_date)
                run_date= cursor.fetchall()
                print("run_date ", run_date[0][0])
                run_date = run_date[0][0].strftime('%Y-%m-%d %H:%M:%S')
                length = len(run_date)
                print("run_date_len:", length)


                cursor.execute(duration)
                duration = cursor.fetchall()
                duration = duration[0][0]
                print("durantion ", duration)
                print("duration_len:", len(duration))

                cursor.execute(repeat)
                repeat = cursor.fetchall()
                repeat = repeat[0][0]
                print("repeat ", repeat)
                #print("repeat_len:", len(repeat))

                client.send(run_date.encode())
                client.send(duration.encode())
                client.send(str(repeat).encode())


                #sql = "SELECT * FROM vuln_shell_list"
                sql = "SELECT * FROM vuln_shell_list where vuln_shell_id in (" + shell_num[0][0] + ")"
                #print(sql)
                cursor.execute(sql)

                result = cursor.fetchall()
                client.send(str(len(result)).encode())
                print("result_len: ",len(result))


                for record in result:
                    print(record[0]) #U01

                    msg = record[1].encode() #U01 진단코드

                    length = len(msg)

                    client.send(length.to_bytes(4, byteorder="little"))

                    client.send(msg)


                # client.sendall("shell_code_end".encode())

                db.close()

            if data.decode() == 'shell_result_to_server   ':
                print("shell result!!!")
                filename = './result.log'
                with open(filename, 'a') as f:
                    print("file open")
                    data = client.recv(4)  #왜안돼
                    length = int.from_bytes(data, "little")
                    data = client.recv(length)
                    #print(data)
                    msg = data.decode()
                    f.write(msg)
                    f.close()
                command = "python3 insert_result.py"
                os.system(command)

            if not data:
                print('Disconnected by ' + addr[0], ':', addr[1])

                break

            print('Received from ' + addr[0], ':', addr[1], data.decode())


        except ConnectionResetError as e:

            print('exDisconnected by ' + addr[0], ':', addr[1])

            break
    #command = "python3 result_to_db.py"
    #os.system(command)

    client.close()


server = socket.socket()

server.bind(('172.31.45.126', 9999))

server.listen(1)

print("server open!")

while True:
    client, addr = server.accept()

    start_new_thread(threaded, (client, addr))

client.close()

server.close()
